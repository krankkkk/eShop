package de.baleipzig.products.rest;

import de.baleipzig.eshop.api.dto.ProductDTO;
import de.baleipzig.products.mapping.MapperFactory;
import de.baleipzig.products.persistance.Product;
import de.baleipzig.products.errorhandling.ProductNotFoundException;
import de.baleipzig.products.persistance.ProductRepository;
import org.springframework.data.jpa.domain.AbstractPersistable;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ProductService {

    private final ProductRepository repository;

    public ProductService(ProductRepository repository, MapperFactory mapperFactory) {
        this.repository = repository;
    }

    public List<Long> getAllProducts() {
        List<Product> products = repository.findAll();
        return products.stream()
                .map(AbstractPersistable::getId)
                .toList();
    }

    public Long saveProduct(Product product) {

        Product savedProduct = repository.save(product);
        // return autogenerated id in response
        return savedProduct.getId();
    }

    public Product getOneProduct(Long id) throws ProductNotFoundException {
        return repository.findById(id)
                .orElseThrow(() -> new ProductNotFoundException(id));
    }

    public Long updateProduct(Product newProduct, Long id) throws ProductNotFoundException {

        return repository.findById(id)
                .map(product -> {
                    product.setName(newProduct.getName());
                    product.setProductType(newProduct.getProductType());
                    product.setProperty(newProduct.getProperty());
                    Product savedProduct = repository.save(product);
                    return savedProduct.getId();
                })
                .orElseThrow(() -> new ProductNotFoundException(id));
    }

    public void deleteProduct(Long id) {
        if (repository.findById(id).isEmpty()) {
            throw new ProductNotFoundException(id);
        }
        repository.deleteById(id);
    }

}
