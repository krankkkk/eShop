package de.baleipzig.products.services;

import de.baleipzig.products.exceptions.ProductNotFoundException;
import de.baleipzig.products.entities.Product;
import de.baleipzig.products.repositories.ProductRepository;
import de.baleipzig.products.services.interfaces.ProductService;
import org.springframework.data.jpa.domain.AbstractPersistable;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ProductServiceImpl implements ProductService {

    private final ProductRepository repository;

    public ProductServiceImpl(ProductRepository repository) {
        this.repository = repository;
    }

    public List<Long> getAllProducts() {
        List<Product> products = repository.findAll();
        return products.stream()
                .map(AbstractPersistable::getId)
                .toList();
    }

    public Long saveProduct(Product product) {

        Product savedProduct = repository.save(product);
        // return autogenerated id in response
        return savedProduct.getId();
    }

    public Product getOneProduct(Long id) throws ProductNotFoundException {
        return repository.findById(id)
                .orElseThrow(() -> new ProductNotFoundException(id));
    }

    public Long updateProduct(Product newProduct) throws ProductNotFoundException {
        long id = newProduct.getId();
        repository.findById(id)
                .orElseThrow(() -> new ProductNotFoundException(id));

        return repository.save(newProduct).getId();
    }

    public void deleteProduct(Long id) {
        if (repository.findById(id).isEmpty()) {
            throw new ProductNotFoundException(id);
        }
        repository.deleteById(id);
    }

}
