package de.baleipzig.products;

import de.baleipzig.products.persistance.Product;
import de.baleipzig.products.persistance.ProductNotFoundException;
import de.baleipzig.products.persistance.ProductRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;


@RestController
public class ProductController {

    private final ProductRepository repository;

    public ProductController(ProductRepository repository) {
        this.repository = repository;
    }

    @GetMapping("/products")
    public List<ProductDTO> all(){

        List<Product> products = repository.findAll();
        return products.stream()
                .map(this::convertToDto)
                .toList();
    }

    @PostMapping(value = "/products", consumes = "application/json")
    public long newProduct(@RequestBody ProductDTO dtoProduct) {
        Product newProduct = new Product(dtoProduct);

        Product product = repository.save(newProduct);

        // return autogenerated id in response
        return product.getId();
    }

    @GetMapping("/products/{id}")
    public ProductDTO one(@PathVariable long id){
        Product product = repository.findById(id)
                .orElseThrow(() -> new ProductNotFoundException(id));
        return convertToDto(product);
    }

    /**
     * Updated ein Produkt.
     * @param dtoProduct Die neuen Daten fÃ¼r das Produkt
     * @param id die ID des Produktes, das bearbeitet werden soll
     * @return die ID des Updateten Produkt
     */
    @PutMapping(value = "/products/{id}", consumes = "application/json", produces = "application/json")
    public long replaceProduct(@RequestBody ProductDTO dtoProduct, @PathVariable Long id) {

        Product newProduct = new Product(dtoProduct);

        return repository.findById(id)
                .map(product -> {
                    product.setName(newProduct.getName());
                    product.setProductType(newProduct.getProductType());
                    product.setEigenschaft(newProduct.getEigenschaft());
                    Product savedProduct = repository.save(product);
                    return savedProduct.getId();
                })
                .orElseThrow(() -> new ProductNotFoundException(id));
    }


    @DeleteMapping("/products/{id}")
    public void deleteProduct(@PathVariable Long id) {
        repository.deleteById(id);
    }


    private ProductDTO convertToDto (Product product) {

        return new ProductDTO(
                product.getId(),
                product.getProductType(),
                product.getName(),
                product.getEigenschaft());
    }
}
